@model Exercise3.Models.DisplayDataContainerViewModel
@{
    ViewBag.Title = "display";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>

<html>
<head>
    
    <meta name="viewport" content="width=device-width" />
</head>
<body>
    
    <canvas id="canvas1"></canvas>
    
        <script>
            var data;
            var objArray;
            //async ajax call that has variety of responses depending on mode.
            function ajaxRequest(ctx,url,mode,freq) {
                var gdr = new XMLHttpRequest();
                var intId = null;
                
                if (mode === 'load') {
                    gdr.onreadystatechange = function () {

                        if (gdr.readyState === 4) {
                            if (gdr.status == 200 && gdr.status < 300) {
                                objArray = JSON.parse(gdr.responseText);
                                intId = movePlane(ctx, getLoadedData, freq);
                            }
                        }
                    }
                } else if (mode === 'display') {
                    gdr.onreadystatechange = function () {
                        if (gdr.readyState === 4) {
                            if (gdr.status == 200 && gdr.status < 300) {
                                
                                data = JSON.parse(gdr.responseText);
                                display(data);
                            }
                        }
                    }

                } else {
                    gdr.onreadystatechange = function () {
                        if (gdr.readyState === 4) {
                            if (gdr.status == 200 && gdr.status < 300) {
                                function jsonReq() {
                                    gdr = new XMLHttpRequest();
                                    gdr.onreadystatechange = function () {

                                        if (gdr.readyState === 4) {
                                            if (gdr.status == 200 && gdr.status < 300) {
                                                //get the data.
                                                data = JSON.parse(gdr.responseText);

                                                //if you want to see long path with random
                                                // values, use this line instead: data = getData();

                                                //and put the JSON.parse line that is above in comment.

                                                //draw the path that.
                                                drawPath(ctx, data);
                                                
                                            }
                                        }
                                    }
                                    gdr.open('GET', url, true);
                                    gdr.send();
                                }
                                intId = setInterval(jsonReq, freq);
                            }
                        }
                    }
                }
                gdr.open('GET', url, true);
                gdr.send();
                return intId;
            }
            //function to get the data out of server.
            function GetData(ctx, freq) {
                let URL = '/location/@Model.Param1/@Model.Param2';
                return ajaxRequest(ctx, URL , 'get', freq);
            }
            //a function to save the data given from the server.
            function saveData(ctx, freq) {
                let URL = '/location/@Model.Param1/@Model.Param2/@Model.FileName';
                return ajaxRequest(ctx, URL, 'save', freq);
            }
            //a function to load the data out of a file.
            function loadData(ctx,freq) {
                //array of dicts
                console.log("got to load data");
                let URL = '/load/@Model.FileName';
                var counter = 0;
                return ajaxRequest(ctx,URL,'load',freq);

            }


            //testing random points function.
            function getData() {
                return {
                    Lon: (Math.floor(Math.random() * 361) - 180),
                    Lat: (Math.floor(Math.random() * 181) - 90)
                }
            }
            function getLoadedData() {
                if (counter >= objArray.length) {
                    return null;
                }
                return objArray[counter++];
            }
            function convert(param, range1Start, range1End, range2Start, range2End) {
                return ((param - range1Start) * (range2End - range2Start) /
                    (range1End - range1Start) + range2Start);
            }
            function line(ctx,xs, ys, xe, ye, color) {
                ctx.beginPath();
                ctx.lineCap = "round";
                ctx.moveTo(xs, ys);
                ctx.lineTo(xe, ye);
                ctx.strokeStyle = color;
                ctx.lineWidth = 3;
                ctx.stroke();
            }
            function drawPath(ctx, data) {

                x = convert(data.Lon, r1.start, r1.end, r3.start, r3.end);
                y = convert(data.Lat, r2.start, r2.end, r4.start, r4.end);

                if (formerX != "start") {
                    if (x != formerX || y != formerY) {
                        line(ctx, formerX, formerY, x, y, "#FFFFFF");
                    }
                    
                }
                formerX = x, formerY = y;
            }
            function movePlane(ctx,func,freq) {


                var id = setInterval(function () {

                    data = func();
                    if(data)
                        drawPath(ctx, data);
                    
                    //if data is null, clear the interval
                    if (data === null) {
                        alert("animation is over.");
                        clearInterval(id);
                    }
                }, freq);
                return id;
            }
            class range {
                constructor(start, end) {
                    this.start = start;
                    this.end = end;
                }
            }


            var lonEdge = 180, latEdge = 90;
            var x, y, r1, r2, r3, r4;
            var formerX = "start", formerY = "start";
            //ranges to convert from
            r1 = new range(-lonEdge, lonEdge);
            r2 = new range(-latEdge, latEdge);
            //ranges to convert to.
            r3 = new range(0, window.innerWidth);
            r4 = new range(0, window.innerHeight);

            //canvas and context
            var c = document.getElementById("canvas1");
            var ctx = c.getContext("2d");
            c.width = window.innerWidth;
            c.height = window.innerHeight;


            //display the plane starting position.
            function display(data) {

                x = convert(data.Lon, r1.start, r1.end, r3.start, r3.end);
                y = convert(data.Lat, r2.start, r2.end, r4.start, r4.end);
                var planeSize = 35;

                var plane = new Image();
                plane.onload = function () {
                    ctx.drawImage(plane, x - planeSize / 2,
                        y - planeSize / 2, planeSize, planeSize);

                }
                plane.src = '/Content/airplane-icon.png';
                plane.alt = "airplane-icon";
                formerX = x;
                formerY = y;
            }
            let urlDisplay = '/location/@Model.Param1/@Model.Param2';
            if (@Model.Freq < 0 &&
                @Model.paramCheck.isIP(Model.Param1) &&
                @Model.paramCheck.isInt(Model.Param2)){
                ajaxRequest(ctx, urlDisplay, 'display');
            }
            //duration is > 0 only in save
            else if (@Model.paramCheck.isIP(Model.Param1) && @Model.Duration > 0) {
                ajaxRequest(ctx, urlDisplay, 'display');
                var saveId = saveData(ctx, Math.round(1000 * @Model.Param2));
                var timeout = Math.round(@Model.Duration * 1000);
                setTimeout(function () {
                    clearInterval(saveId);
                    alert("animation is over.")
                }, timeout);
            }
            //get data (display with freq)
            else if (@Model.Freq > 0 && @Model.paramCheck.isIP(Model.Param1)){
                //need to send myGetData instead of getData.
                ajaxRequest(ctx, urlDisplay, 'display');
                GetData(ctx, Math.round(1000 * @Model.Freq));
            }
                //call loadData to load data out of file.
            else if (@Model.paramCheck.isNum(Model.Param2)) {
                ajaxRequest(ctx, urlDisplay, 'display');
                loadData(ctx, Math.round(1000 * @Model.Param2));
            }
            //if its not a legit url send the user to wrongUrl page with links to legit url.
            else {
                //var body = document.getElementsByTagName(body);
                //body.style.background = 'none';
                //window.location.href = '/Home/WrongUrl/{params}';
            }

        </script>
</body>
</html>
